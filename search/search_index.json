{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RyeCharm user documentation","text":"<p>RyeCharm is the all-in-one PyCharm plugin for Astral-backed Python tools: Ruff, uv and Rye.</p> <p>This plugin only supports the latest versions of the tools and can only be installed on PyCharm 2024.2 and later.</p>"},{"location":"#usage","title":"Usage","text":"<p>If you already have Rye, Ruff and/or uv installed, you can start using this plugin the moment you install it. The executables will be automatically detected.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This project is not an official Astral project.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#what-is-the-goal-of-this-plugin","title":"What is the goal of this plugin?","text":"<p>RyeCharm aims to map the tools' commands to PyCharm's existing IDE capabilities.</p> <p>It also provides some aesthetic features, such as customized icons for related files.</p>"},{"location":"faq/#is-this-an-official-astral-project","title":"Is this an official Astral project?","text":"<p>No. However, it is meant to serve as the first step towards an \"official\" plugin.</p>"},{"location":"features/","title":"Features","text":"<p>Aside from the specialized APIs used for \"core\" operations, RyeCharm provides integration via the following IDE features: actions, intentions and inspections.</p>"},{"location":"features/#actions","title":"Actions","text":"<p>IDE actions are the main entrypoint for many operations that are otherwise unfit to be used as intentions.</p> <p>Examples: Open configuration file and Cleaning cache.</p>"},{"location":"features/#intentions","title":"Intentions","text":"<p>Intentions are contextually relevant actions that may only be triggered in an editor.</p> <p>Examples: Bump project version and Synchronize project.</p>"},{"location":"features/#inspections","title":"Inspections","text":"<p>Inspections find certain problems with your project. Those implemented by RyeCharm are mostly about the use of the tools rather than code smells.</p> <p>Examples: <code>uv.lock</code> should not be edited manually.</p>"},{"location":"other-features/","title":"Other features","text":""},{"location":"other-features/#file-icons","title":"File icons","text":"<p>In the Project tool window, editor tabs, navigation bar and various other places, the icons for the following files are replaced with the tools' logos:</p> <ul> <li>Ruff: <code>ruff.toml</code>/<code>.ruff.toml</code></li> <li>uv: <code>uv.toml</code>, <code>uv.lock</code></li> <li>Rye: <code>.rye/config.toml</code></li> </ul> Project tool window: <p></p> Editor tabs: <p></p> Navigation bar: <p></p>"},{"location":"configurations/","title":"Configurations overview","text":"<p>RyeCharm allows configurations at two levels: IDE and project. Project-level configurations only override the IDE-level counterparts when the corresponding \"Override\" checkboxes are selected.</p> <p>Project-level settings are stored in the <code>ryecharm.xml</code> file under the <code>.idea</code> directory and can be shared with other people (for example, via version-control systems) to serve as the default settings for the project.</p> <p>Override settings are stored in the <code>ryecharm-overrides.xml</code> file in the same directory. This file should not be committed, as its purpose is to allow overriding project defaults.</p>"},{"location":"configurations/ruff/","title":"Ruff","text":""},{"location":"configurations/ruff/#executable","title":"Executable","text":"<p>The Ruff executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in the following order:</p> <ul> <li>The <code>ruff</code> executable found under Rye's <code>self</code> environment.</li> <li>Any <code>ruff</code> executable found in PATH.</li> <li>Any <code>ruff</code> executable found in the project's virtual environment.</li> </ul>"},{"location":"configurations/ruff/#cross-platform-executable-resolution","title":"Cross-platform executable resolution","text":"<p>If this option is enabled, the executable will be resolved against the project's interpreter directory, with its extension removed.</p> <p>This is useful if Ruff is a development dependency and is expected to always be installed, regardless of the user's platform.</p>"},{"location":"configurations/ruff/#configuration-file","title":"Configuration file","text":"<p>If specified, this file will be passed to Ruff on every invocation.</p> <p>This corresponds to the <code>--config</code> command-line option and the <code>configuration</code> language server setting.</p>"},{"location":"configurations/ruff/#running-mode","title":"Running mode","text":"<p>This setting controls the manner in which linting diagnostics are provided.</p> <p>Default: Command line</p>"},{"location":"configurations/ruff/#tooltips","title":"Tooltips","text":""},{"location":"configurations/ruff/#tooltip-format","title":"Tooltip format","text":"<p>The format in which tooltips are displayed.</p> <p>Default: A123: Message</p> MessageA123: MessageRuff (A123): MessageMessage Ruff(A123) <p></p> <p></p> <p></p> <p></p>"},{"location":"configurations/ruff/#formatting","title":"Formatting","text":"<p>Settings in this group controls the events on which Ruff's formatter is triggered.</p>"},{"location":"configurations/ruff/#on-save","title":"On save","text":"<p>Whether files should be formatted by Ruff before saving.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#on-save-but-only-project-files","title":"On save, but only project files","text":"<p>Whether only files belong to the current project should be formatted by Ruff.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#on-reformat","title":"On reformat","text":"<p>Whether the Reformat Code action should trigger Ruff.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#on-optimize-imports","title":"On optimize imports","text":"<p>Whether the Optimize Imports action should trigger Ruff.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#documentation","title":"Documentation","text":"<p>This group controls the behaviour of documentation popups.</p>"},{"location":"configurations/ruff/#for-noqa-codes","title":"For <code>noqa</code> codes","text":"<p>Whether documentation popups should be shown when <code>noqa</code> codes in Python comments are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#for-toml-keys","title":"For TOML keys","text":"<p>Whether documentation popups should be shown when the keys of the <code>tool.ruff</code> table in the <code>pyproject.toml</code> file (or top-level keys for <code>ruff.toml</code>/<code>.ruff.toml</code>) are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#language-server-settings","title":"Language server settings","text":"<p>Some of these settings' values are passed to Ruff as language server initialization options.</p>"},{"location":"configurations/ruff/#automatically-restart-servers-on-configuration-change","title":"Automatically restart servers on configuration change","text":"<p>Whether the running servers should be restarted immediately when the Apply/OK buttons are clicked.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#hover-support","title":"Hover support","text":"<p>Whether the language server's hover support should be used.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#formatting-support","title":"Formatting support","text":"<p>Whether the language server's formatting support should be used.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#diagnostics-support","title":"Diagnostics support","text":"<p>Whether the language server's linting support should be used.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#show-diagnostics-for-syntax-errors","title":"Show diagnostics for syntax errors","text":"<p>Whether syntax error diagnostics should be shown.</p> <p>This corresponds to the <code>showSyntaxErrors</code> language server setting.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#code-actions-support","title":"Code actions support","text":"<p>Whether the language server's quick fix support should be used.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#fix-all-problems-in-one-action","title":"Fix all problems in one action","text":"<p>Whether the <code>source.fixAll</code> code action should be used.</p> <p>This corresponds to the <code>fixAll</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#organize-imports","title":"Organize imports","text":"<p>Whether the <code>source.organizeImports</code> code action should be used.</p> <p>This corresponds to the <code>organizeImports</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#suppress-rules","title":"Suppress rules","text":"<p>Whether the code action to suppress a problem should be used.</p> <p>This corresponds to the <code>codeAction.disableRuleComment.enable</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#fix-problems","title":"Fix problems","text":"<p>Whether the code action corresponding to the quick fix for a problem should be used.</p> <p>This corresponds to the <code>codeAction.fixViolation.enable</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#log-level","title":"Log level","text":"<p>Controls the amount of logs the language server will emit.</p> <p>This corresponds to the <code>logLevel</code> language server setting.</p> <p>Default: Information</p>"},{"location":"configurations/ruff/#log-file","title":"Log file","text":"<p>The file to which the logs will be written.</p> <p>This corresponds to the <code>logFile</code> language server setting.</p>"},{"location":"configurations/ruff/#other-settings","title":"Other settings","text":""},{"location":"configurations/ruff/#suggest-executable","title":"Suggest executable","text":"<p>Whether RyeCharm should automatically find a potential Ruff executable and suggest setting that as the executable for the current project on some events.</p> <p>See also the corresponding action.</p>"},{"location":"configurations/ruff/#on-project-open","title":"On project open","text":"<p>Whether a potential executable should be suggested when a project is opened.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#on-packages-change","title":"On packages change","text":"<p>Whether a potential executable should be suggested when a package is installed via the Python Packages toolwindow.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/rye/","title":"Rye","text":""},{"location":"configurations/rye/#executable","title":"Executable","text":"<p>The Rye executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in PATH.</p>"},{"location":"configurations/uv/","title":"uv","text":""},{"location":"configurations/uv/#executable","title":"Executable","text":"<p>The uv executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in the following order:</p> <ul> <li>The <code>uv</code> executable found under Rye's <code>uv</code> subdirectory.</li> <li>Any <code>uv</code> executable found in PATH.</li> <li>Any <code>uv</code> executable found in the project's virtual environment.</li> </ul>"},{"location":"configurations/uv/#use-uv-for-package-operations","title":"Use uv for package operations","text":"<p>If enabled, the Python Packages toolwindow's package operations will be performed with <code>uv</code> instead of the default <code>pip</code>.</p> <p>This setting has no effect on an <code>uv</code>-generated project, as <code>pip</code> is not installed by default for such projects.</p> <p>Default: <code>true</code></p>"},{"location":"ruff/","title":"Ruff integration","text":"<p>Ruff is a linter and formatter. While these features are mainly used via the command line, they are also provided via the language server protocol when Ruff is run as a language server.</p> <p>RyeCharm makes use of both aforementioned ways and allow choosing one over the other via running modes.</p>"},{"location":"ruff/#supported-files","title":"Supported files","text":"<p>Ruff itself supports <code>.py</code>, <code>.pyi</code> and <code>.ipynb</code> files. This plugin has yet to support the lattermost.</p>"},{"location":"ruff/actions/","title":"Actions","text":""},{"location":"ruff/actions/#clean-cache","title":"Clean cache","text":"<p>Remove all <code>.ruff_cache</code> directories in the project recursively.</p> <p>This is equivalent to running <code>ruff clean</code> at the project's path.</p>"},{"location":"ruff/actions/#clear-plugin-cache","title":"Clear plugin cache","text":"<p>Documentation popups are prerendered and cached. While the cache is automatically invalidated whenever the executable changes, manually clearing it might sometimes be useful.</p>"},{"location":"ruff/actions/#show-executable","title":"Show executable","text":"<p>Show the Ruff executable that would be used for the project, or, when the action is not triggered in a project context, the global Ruff executable.</p> <p></p>"},{"location":"ruff/actions/#show-linters","title":"Show linters","text":"<p>Show a table of upstream linters that Ruff supports.</p> <p>This is equivalent to running <code>ruff linter</code>.</p> <p></p>"},{"location":"ruff/actions/#show-version","title":"Show version","text":"<p>Display a message showing the version of the current Ruff executable.</p> <p>This is equivalent to running <code>ruff version</code>.</p> <p></p>"},{"location":"ruff/actions/#suggest-project-executable","title":"Suggest project executable","text":"<p>Find a potential executable and suggest setting it as the Ruff executable for the current project, even if one is already specified.</p> <p>In most cases, this is not necessary, since the plugin will detect such executables automatically.</p> <p></p>"},{"location":"ruff/documentation/","title":"Documentation","text":"<p>On hover or Quick Documentation (Ctrl + Q), RyeCharm will show documentation popups for the currently selected symbol if it is a recognized one.</p>"},{"location":"ruff/documentation/#noqa-rules","title":"<code>noqa</code> rules","text":"<p>Rule documentation popups are shown for rule codes in <code># noqa</code> comments of both line and file-level.</p> <p>This is equivalent to running <code>ruff rule ...</code> with the rule code as argument.</p> Line-levelFile-level <p></p> <p></p>"},{"location":"ruff/documentation/#toml-keys","title":"TOML keys","text":"<p>Configuration option documentation popups are shown for keys of the <code>[tool.ruff]</code> table of <code>pyproject.toml</code> (or a subtable thereof) and all keys in <code>ruff.toml</code>/<code>.ruff.toml</code>.</p> <p>This is equivalent to running <code>ruff config ...</code> with the option name as argument.</p> <code>pyproject.toml</code><code>ruff.toml</code> <p></p> <p></p>"},{"location":"ruff/formatting/","title":"Formatting","text":"<p>RyeCharm can trigger Ruff to format a file on three events:</p> <ul> <li>File save (Ctrl + S, editor close, IDE close, etc.)</li> <li>Reformat (Ctrl + Alt + L or similar)</li> <li>Optimize imports (Ctrl + Alt + O or similar)</li> </ul> <p>Unsupported files are not affected.</p>"},{"location":"ruff/formatting/#file-save","title":"File save","text":"<p>Everytime a file is saved, automatically or manually, RyeCharm will run Ruff on it if it is a supported file.</p> <p>This is equivalent to running <code>ruff format --quiet</code> with the file as input.</p>"},{"location":"ruff/formatting/#reformat","title":"Reformat","text":"<p>This event happens when the Reformat Code action (Ctrl + Alt + L or similar) is triggered, possibly with some code selected.</p> <p>This is equivalent to running <code>ruff format --quiet --range ...</code> with the file and the selected range as input.</p>"},{"location":"ruff/formatting/#optimize-imports","title":"Optimize imports","text":"<p>This event happens when the Optimize Imports action (Ctrl + Alt + O or similar) is triggered.</p> <p>This is equivalent to running <code>ruff check --fix --exit-zero --quiet --select I</code> with the file as input.</p>"},{"location":"ruff/linting/","title":"Linting","text":"<p>There are three linting modes: Command line, LSP4IJ and Native LSP client.</p>"},{"location":"ruff/linting/#command-line-mode","title":"Command line mode","text":"<p>If this mode is selected, RyeCharm will invoke the provided executable after each change made in the editor.</p> <p>This is equivalent to running <code>ruff --no-fix --exit-zero --quiet</code> with the file as input.</p>"},{"location":"ruff/linting/#native-lsp-client-and-lsp4ij-modes","title":"Native LSP client and LSP4IJ modes","text":"<p>These two modes make use of Ruff's language server capabilities. The differences between them are that of the client libraries.</p> Mode Native LSP client LSP4IJ Client Built-in LSP4IJ (third-party) Can be used on Paid IDEs All IDEs Features support* Few Much greater UI integrations Better Good Customizations Easy to implement Limited API stability Unstable Unstable <p>* Ruff's features are supported equally well by both.</p> <p>It is recommended to use the native client where available.</p> <p>Warning</p> <p>On a (paid) IDE with both clients available, a <code>LinkageError</code> will be thrown if Native LSP client is selected. This is a known limitation.</p>"},{"location":"rye/","title":"Rye integration","text":"<p>Rye was meant to be an all-in-one toolchain and package manager. Most of its features are now supported by uv, and it itself is going to be deprecated sometime in the future.</p> <p>Thus, only the following subcommands are supported:</p> <ul> <li><code>show</code>: Show the current project's information</li> <li><code>version</code>: Change the project's version</li> <li><code>config --show-path</code>: Show the path to Rye's configuration file</li> </ul> <p>Replacements:</p> <ul> <li>Formatting and linting: Use Ruff directly.</li> <li>Testing: Use Pytest directly.</li> <li>Project and package management: Use uv directly.</li> </ul>"},{"location":"rye/actions/","title":"Actions","text":""},{"location":"rye/actions/#open-configuration-file","title":"Open configuration file","text":"<p>Open the global Rye configuration file in the editor.</p> <p>This is equivalent to <code>rye config --show-path</code>.</p> <p></p>"},{"location":"rye/actions/#show-executable","title":"Show executable","text":"<p>Show the Rye executable that would be used for the project, or, when the action is not triggered in a project context, the global Rye executable.</p> <p></p>"},{"location":"rye/actions/#show-project-information","title":"Show project information","text":"<p>Open a new editor tab prefilled with the project's information.</p> <p>This is equivalent to running <code>rye show</code> at the project's path.</p> <p></p>"},{"location":"rye/intentions/","title":"Intentions","text":""},{"location":"rye/intentions/#bump-project-version","title":"Bump project version","text":"<p>The three intentions of this type (for major, minor and patch bumping types) are available in a <code>pyproject.toml</code> file.</p> <p>This is equivalent to running <code>rye version --bump ...</code> at the project's path.</p> MajorMinorPatch <p></p> <p></p> <p></p>"},{"location":"uv/","title":"uv integration","text":"<p>uv is a Python package and project manager.</p> <p>RyeCharm provides uv integrations via two main functionalities: generating new projects and managing packages.</p>"},{"location":"uv/actions/","title":"Actions","text":""},{"location":"uv/actions/#show-executable","title":"Show executable","text":"<p>Show the uv executable that would be used for the project, or, when the action is not triggered in a project context, the global uv executable.</p> <p></p>"},{"location":"uv/actions/#show-version","title":"Show version","text":"<p>Display a message showing the version of the current uv executable.</p> <p>This is equivalent to running <code>uv version</code>.</p> <p></p>"},{"location":"uv/generating/","title":"Generating new projects","text":"<p>In the New Project dialog, there will be an uv option on the left column.</p> <p>This panel has the same basic functionalities as the default (Pure Python) panel.</p> <p></p> <p>Note</p> <p>Due to technical limitations, it is currently not possible to extend the standard panel. The uv panel cannot be used with existing framework panels. This is expected to change in PyCharm 2024.3.</p>"},{"location":"uv/inspections/","title":"Inspections","text":""},{"location":"uv/inspections/#uvlock-should-not-be-edited-manually","title":"<code>uv.lock</code> should not be edited manually","text":"<p>When <code>uv.lock</code> is edited, an editor-level notice is shown.</p> <p><code>uv.lock</code> is meant to be generated by <code>uv</code>; manualy changes will be overwritten in subsequent runs. The file therefore should not be edited manually.</p> <p></p>"},{"location":"uv/intentions/","title":"Intentions","text":""},{"location":"uv/intentions/#synchronize-project","title":"Synchronize project","text":"<p>This intention is available in a <code>pyproject.toml</code> file. It does not modify the file, but trigger a subprocess that updates the project's environment.</p> <p>This is equivalent to running <code>uv sync</code> at the project's path.</p> <p></p>"},{"location":"uv/managing/","title":"Managing packages","text":"<p>When the Python Packages toolwindow is used, install, uninstall and upgrade operations will invoke <code>uv</code>'s corresponding commands instead of <code>pip</code>'s.</p> <p>This can be disabled using the corresponding setting.</p>"}]}