{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RyeCharm user documentation","text":"<p>RyeCharm is the all-in-one PyCharm plugin for Astral-backed Python tools: Ruff, uv and Rye.</p> <p>This plugin only supports the latest versions of the tools and can only be installed on PyCharm 2025.1 and later.</p>"},{"location":"#usage","title":"Usage","text":"<p>If you already have Rye, Ruff and/or uv installed, you can start using this plugin the moment you install it. The executables will be automatically detected.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This project is not an official Astral project.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#what-does-ryecharm-mean-what-is-the-goal-of-this-plugin","title":"What does \"RyeCharm\" mean? What is the goal of this plugin?","text":"<p>The name is a portmanteau of \"Rye\" and \"PyCharm\". Regardless of the name, this plugin only ever has minimal support for Rye, since, as of the former's creation, the latter is a tool being deprecated.</p> <p>It was created to become the only PyCharm plugin Python programmers will ever need when working with the next-generation tools maintained by Astral, much like how Rye was created to be an one-stop-shop.</p> <p>Astral's tools are fast and robust, while PyCharm's features are used (and perhaps loved) by many users. RyeCharm aims to combine the best of both worlds.</p>"},{"location":"faq/#is-this-an-official-astral-project","title":"Is this an official Astral project?","text":"<p>No. However, it is meant to serve as the first step towards an \"official\" plugin.</p>"},{"location":"features/","title":"Features","text":"<p>Aside from the specialized APIs used for \"core\" operations, RyeCharm provides integration via the following IDE features: actions, intentions and inspections.</p>"},{"location":"features/#actions","title":"Actions","text":"<p>IDE actions are the main entrypoint for many operations that are otherwise unfit to be used as intentions.</p> <p>Examples: Open configuration file and Cleaning cache.</p>"},{"location":"features/#intentions","title":"Intentions","text":"<p>Intentions are contextually relevant actions that may only be triggered in an editor.</p> <p>Examples: Bump project version and Synchronize project.</p>"},{"location":"features/#inspections","title":"Inspections","text":"<p>Inspections find certain problems with your project. Those implemented by RyeCharm are mostly about the use of the tools rather than code smells.</p> <p>Examples: <code>uv.lock</code> should not be edited manually.</p>"},{"location":"other-features/","title":"Other features","text":""},{"location":"other-features/#file-icons","title":"File icons","text":"<p>In the Project tool window, editor tabs, navigation bar and various other places, the icons for the following files are replaced with the tools' logos:</p> <ul> <li>Ruff: <code>ruff.toml</code>/<code>.ruff.toml</code></li> <li>uv: <code>uv.toml</code>, <code>uv.lock</code></li> <li>Rye: <code>.rye/config.toml</code></li> </ul> <p>Additionally, <code>py.typed</code>, <code>.python-version</code> and <code>pylock.toml</code>'s icons are replaced with Python logos.</p> Project tool window: <p></p> Editor tabs: <p></p> Navigation bar: <p></p>"},{"location":"other-features/#new-terminal-autocompletion","title":"New terminal autocompletion","text":"<p>If the new terminal is used, autocompletion will be provided for <code>ruff</code>, <code>uv</code>, <code>uvx</code> and <code>rye</code> commands.</p> <p></p>"},{"location":"other-features/#language-injection","title":"Language injection","text":""},{"location":"other-features/#inline-script-metadata-block","title":"Inline script metadata block","text":"<p>PEP 723 inline script metadata blocks are automatically injected with TOML. Only Python files whose extensions are either <code>.py</code> or unknown are supported.</p> <p>This can be disabled using the corresponding setting. To force rerendering, make an arbitrary edit or reopen the file.</p> <p></p>"},{"location":"other-features/#requirements-arrays-in-toml-files","title":"Requirements arrays in TOML files","text":"<p>uv settings that takes an array of PEP 508 dependencies are injected with Requirements, similar to that of <code>project.dependencies</code>. Such settings include:</p> <ul> <li>[<code>tool.uv</code>] <code>constraint-dependencies</code></li> <li>[<code>tool.uv</code>] <code>dev-dependencies</code></li> <li>[<code>tool.uv</code>] <code>override-dependencies</code></li> <li>[<code>tool.uv</code>] <code>upgrade-package</code></li> <li>[<code>tool.uv</code>] <code>pip.upgrade-package</code></li> </ul> <p><code>project.optional-dependencies</code> and <code>dependency-groups</code> are also supported. This monkeypatches PY-71120.</p> pyproject.tomluv.toml <p></p> <p></p>"},{"location":"other-features/#edit-script-metadata-fragment","title":"Edit script metadata fragment","text":"<p>This intention is available when the cursor is inside the script metadata block.</p> <p>It opens a new editor with the fragment content prefilled, removing all prefixes and suffixes. The new content will be written back when this editor is closed.</p> Python fileNew editor <p></p> <p></p>"},{"location":"other-features/#installed-version-inlay-hints","title":"Installed version inlay hints","text":"<p>In <code>pyproject.toml</code> and <code>uv.toml</code> files, elements of dependency specifier arrays will have inlay hints displayed next to them, showing the currently installed versions.</p> <p>This applies to the following arrays (configurable using Settings | Inlay Hints | Other | TOML | Dependency versions):</p> <ul> <li><code>project.dependencies</code> (default: enabled)</li> <li><code>project.optional-dependencies.*</code> (default: enabled)</li> <li><code>build-system.requires</code> (default: disabled)</li> <li><code>dependency-groups.*</code> (default: enabled)</li> <li>[<code>tool</code>] <code>uv.constraint-dependencies</code> (default: disabled)</li> <li>[<code>tool</code>] <code>uv.dev-dependencies</code> (default: enabled)</li> <li>[<code>tool</code>] <code>uv.override-dependencies</code> (default: disabled)</li> <li>[<code>tool</code>] <code>uv.upgrade-package</code> (default: disabled)</li> <li>[<code>tool</code>] <code>uv.pip.upgrade-dependencies</code> (default: disabled)</li> </ul> <p>This is equivalent to running <code>uv pip list</code> at the project's path with the corresponding interpreter as argument, if any.</p>"},{"location":"other-features/#limitations","title":"Limitations","text":"<p>On IntelliJ IDEA, flickering might happen during recalculation. The cause of this problem is as of yet unknown.</p> <p>As a workaround, enable the \"Retrieve data for computing dependency version inlay hints in read action\" advanced setting in the uv subpanel.</p> <p>This workaround has the disadvantage of delaying other inlay hint providers, causing a \"synchronous execution under read action\" exception to be logged. Unless the delay proves to be a problem, you can safely ignore this warning.</p>"},{"location":"other-features/#dependency-groups","title":"Dependency groups","text":"<p>PEP 735 dependency groups are supported using a number of features.</p>"},{"location":"other-features/#language-injection_1","title":"Language injection","text":"<p>See \u00a7 Requirements arrays in TOML files.</p> <p></p>"},{"location":"other-features/#references-finding","title":"References finding","text":"<p>On focus, an included group's name will be highlighted along with that group's declaration and vice versa.</p> <p></p>"},{"location":"other-features/#one-click-install-via-line-markers","title":"One-click-install via line markers","text":"<p>Dependency groups can be installed using their corresponding icons in the gutter. The icon next to the <code>[dependency-groups]</code> table header installs all groups.</p> <p>This is equivalent to running <code>uv sync --group ...</code>/<code>uv sync --all-groups</code> at the project's path.</p> <p></p>"},{"location":"other-features/#inspection","title":"Inspection","text":"<p>Errors will be reported for a dependency group if:</p> <ul> <li>It includes an invalid group.</li> <li>It includes itself.</li> <li>It has the same normalized name as another group.</li> </ul>"},{"location":"other-features/#command-logs","title":"Command logs","text":"<p>Tool commands run by RyeCharm and their outputs are logged by the RyeCharm logs tool window. This might be helpful for debugging purposes.</p> Button: <p></p> Console: <p></p>"},{"location":"configurations/","title":"Configurations overview","text":"<p>RyeCharm allows configurations at two levels: IDE and project. Project-level configurations only override the IDE-level counterparts when the corresponding \"Override\" checkboxes are selected.</p> <p>Project-level settings are stored in the <code>ryecharm.xml</code> file under the <code>.idea</code> directory and can be shared with other people (for example, via version-control systems) to serve as the default settings for the project.</p> <p>Override settings are stored in the <code>ryecharm-overrides.xml</code> file in the same directory. This file should not be committed, as its purpose is to allow overriding project defaults.</p>"},{"location":"configurations/#advanced-settings","title":"Advanced settings","text":"<p>Settings in this group are not expected to be used by the vast majority of users and might be changed at any time. They are thus deliberately undocumented.</p>"},{"location":"configurations/#registry-keys","title":"Registry keys","text":"<p>RyeCharm manages a few registry keys which enables development-specific features. They are useful if you want to contribute to RyeCharm and need to debug your code.</p>"},{"location":"configurations/main/","title":"Other configurations","text":""},{"location":"configurations/main/#language-injection","title":"Language injection","text":""},{"location":"configurations/main/#pep-723-inline-script-metadata-blocks","title":"PEP 723 inline script metadata blocks","text":"<p>Whether PEP 723 inline script metadata blocks should have TOML injected.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/main/#requirements-arrays-in-toml-files","title":"Requirements arrays in TOML files","text":"<p>Whether settings taking requirements arrays as values should have Requirements injected.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/","title":"Ruff","text":""},{"location":"configurations/ruff/#executable","title":"Executable","text":"<p>The Ruff executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in the following order:</p> <ul> <li>The <code>ruff</code> executable found under Rye's <code>self</code> environment.</li> <li>Any <code>ruff</code> executable found in PATH.</li> <li>Any <code>ruff</code> executable found in the project's virtual environment.</li> </ul>"},{"location":"configurations/ruff/#cross-platform-executable-resolution","title":"Cross-platform executable resolution","text":"<p>If this option is enabled and the executable is specified as a relative path, it will be resolved against the project's interpreter directory with its extension removed.</p> <p>This is useful if Ruff is a development dependency and is expected to always be installed, regardless of the user's platform.</p>"},{"location":"configurations/ruff/#configuration-file","title":"Configuration file","text":"<p>If specified, this file will be passed to Ruff on every invocation.</p> <p>This corresponds to the <code>--config</code> command-line option and the <code>configuration</code> language server setting.</p>"},{"location":"configurations/ruff/#running-mode","title":"Running mode","text":"<p>The manner in which the executable is invoked.</p> <p>Default: Command line</p> <p>See Running modes for more information.</p>"},{"location":"configurations/ruff/#main-functionalities","title":"Main functionalities","text":""},{"location":"configurations/ruff/#linting","title":"Linting","text":"<p>Whether linting errors (diagnostics) should be shown.</p> <p>This corresponds to the <code>lint.enable</code> language server setting.</p> <p>Default: <code>true</code></p> <p>See Linting for more information.</p>"},{"location":"configurations/ruff/#report-syntax-errors","title":"Report syntax errors","text":"<p>Whether diagnostics for syntax errors should be shown.</p> <p>This corresponds to the <code>showSyntaxErrors</code> language server setting.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#show-editor-banner-for-file-level-diagnostics","title":"Show editor banner for file-level diagnostics","text":"<p>Whether diagnostics for the entire file (e.g., <code>INP001</code>) should be shown at the very top of the editor for that file as a banner.</p> <p>Default: <code>false</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/ruff/#render-tooltips","title":"Render tooltips","text":"<p>Whether error messages should be rendered as Markdown.</p> <p>Default: <code>false</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/ruff/#tooltip-format","title":"Tooltip format","text":"<p>The format in which tooltips are displayed.</p> <p>Default: A123: Message</p> MessageA123: MessageRuff (A123): MessageMessage Ruff(A123) <p></p> <p></p> <p></p> <p></p>"},{"location":"configurations/ruff/#quick-fixes","title":"Quick fixes","text":"<p>Whether quick fixes (code actions) should be suggested.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#fix-all-safely-fixable-violations","title":"Fix all safely fixable violations","text":"<p>Whether a quick fix to fix all safely fixable violations should be suggested.</p> <p>This corresponds to the <code>fixAll</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#organize-imports","title":"Organize imports","text":"<p>Whether a quick fix to organize the imports section should be suggested.</p> <p>This corresponds to the <code>organizeImports</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#disable-rule-for-line","title":"Disable rule for line","text":"<p>Whether a quick fix to disable a given rule for the current line should be suggested.</p> <p>This corresponds to the <code>codeAction.disableRuleComment.enable</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#fix-single-violation","title":"Fix single violation","text":"<p>Whether a quick fix specific to the current violation should be suggested.</p> <p>This corresponds to the <code>codeAction.fixViolation.enable</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#fix-similar-violations","title":"Fix similar violations","text":"<p>Whether quick fixes to fix violations of the same rule as the current one should be suggested.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#offer-fixes-even-when-rule-is-considered-unfixable","title":"Offer fixes even when rule is considered unfixable","text":"<p>Whether a quick fix specific to the current violation should be suggested even if the rule in question is configured to be unfixable.</p> <p>This is equivalent to running <code>ruff check --fixable ALL</code>.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#formatting","title":"Formatting","text":"<p>Whether Ruff's formatter should be used instead of the IDE's default formatter.</p> <p>Default: <code>true</code></p> <p>See Formatting for more information.</p>"},{"location":"configurations/ruff/#run-on-reformat","title":"Run on reformat","text":"<p>Whether the Reformat Code action should trigger Ruff.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#run-on-optimize-imports","title":"Run on optimize imports","text":"<p>Whether the Optimize Imports action should trigger Ruff.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#documentation-popups","title":"Documentation popups","text":"<p>Whether documentation popups should be shown.</p> <p>Default: <code>true</code></p> <p>See Documentation for more information.</p>"},{"location":"configurations/ruff/#for-rule-codes-in-noqa-comments","title":"For rule codes in <code>noqa</code> comments","text":"<p>Whether documentation popups should be shown when <code>noqa</code> codes in Python comments are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#for-rule-codes-in-toml-files","title":"For rule codes in TOML files","text":"<p>Whether documentation popups should be shown when rule codes in rule selector arrays are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#for-setting-keys-in-toml-files","title":"For setting keys in TOML files","text":"<p>Whether documentation popups should be shown when the keys of the <code>tool.ruff</code> table in the <code>pyproject.toml</code> file (or top-level keys for <code>ruff.toml</code>/<code>.ruff.toml</code>) are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#log-level","title":"Log level","text":"<p>The amount of logs the language server will emit.</p> <p>This corresponds to the <code>logLevel</code> language server setting.</p> <p>Default: Information</p>"},{"location":"configurations/ruff/#log-file","title":"Log file","text":"<p>The file to which the logs will be written.</p> <p>This corresponds to the <code>logFile</code> language server setting.</p>"},{"location":"configurations/ruff/#run-on-save","title":"Run on save","text":"<p>Whether Ruff should be run on files before saving.</p> <p>If both \"fix problems\" and \"format\" are enabled, they are run in that order.</p>"},{"location":"configurations/ruff/#project-files-only","title":"Project files only","text":"<p>Whether only files belong to the current project should be run on.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#format","title":"Format","text":"<p>Whether Ruff should format the file before it is saved.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#fix-violations","title":"Fix violations","text":"<p>Whether Ruff should try to fix all safely fixable violations in the file before it is saved.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#other-settings","title":"Other settings","text":""},{"location":"configurations/ruff/#suggest-executable","title":"Suggest executable","text":"<p>Whether RyeCharm should automatically find a potential Ruff executable and suggest setting that as the executable for the current project on some events.</p> <p>This functionality can also be triggered as an action.</p>"},{"location":"configurations/ruff/#on-project-open","title":"On project open","text":"<p>Whether a potential executable should be suggested when a project is opened.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#on-packages-change","title":"On packages change","text":"<p>Whether a potential executable should be suggested when a package is installed via the Python Packages tool window.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#folding","title":"Folding","text":"<p>Settings related to code folding functionalities.</p>"},{"location":"configurations/ruff/#fold-single-rule-selectors-by-default","title":"Fold single-rule selectors by default","text":"<p>Whether single-rule selectors should be initially displayed in their folded forms (i.e., their names).</p> <p>Note that such selectors are always manually foldable, regardless of this setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#advanced-settings","title":"Advanced settings","text":""},{"location":"configurations/ruff/#automatically-restart-servers-on-configuration-change","title":"Automatically restart servers on configuration change","text":"<p>Whether the running servers should be restarted immediately when the Apply/OK buttons are clicked.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/rye/","title":"Rye","text":""},{"location":"configurations/rye/#executable","title":"Executable","text":"<p>The Rye executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in PATH.</p>"},{"location":"configurations/uv/","title":"uv","text":""},{"location":"configurations/uv/#executable","title":"Executable","text":"<p>The uv executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in the following order:</p> <ul> <li>The <code>uv</code> executable found under Rye's <code>uv</code> subdirectory.</li> <li>Any <code>uv</code> executable found in PATH.</li> <li>Any <code>uv</code> executable found in the project's virtual environment.</li> </ul>"},{"location":"configurations/uv/#configuration-file","title":"Configuration file","text":"<p>If specified, this file will be passed to uv on every invocation.</p> <p>This corresponds to the <code>--config-file</code> command-line option.</p>"},{"location":"configurations/uv/#main-functionalities","title":"Main functionalities","text":""},{"location":"configurations/uv/#show-dependency-tree-popups","title":"Show dependency tree popups","text":"<p>Whether dependency trees should be shown (in the form of documentation popups) when a dependency specifier is hovered.</p> <p>Default: <code>true</code></p> <p>See Documentation for more information.</p>"},{"location":"configurations/uv/#show-version-specifiers","title":"Show version specifiers","text":"<p>Whether version specifiers should be shown next to each package node in dependency trees.</p> <p>This corresponds to the <code>--show-version-specifiers</code> command-line option.</p> <p>Default: <code>true</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/uv/#show-latest-versions","title":"Show latest versions","text":"<p>Whether the latest version should be shown next to each package node in dependency trees if the installed version is not latest.</p> <p>This corresponds to the <code>--outdated</code> command-line option.</p> <p>Default: <code>false</code></p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/uv/#hide-duplicated-subtrees","title":"Hide duplicated subtrees","text":"<p>Whether dependency subtrees that have already been shown should be hidden.</p> <p>This corresponds to the <code>--no-dedupe</code> command-line option.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/uv/#max-depth","title":"Max depth","text":"<p>The maximum depth of the dependency trees.</p> <p>This corresponds to the <code>--depth</code> command-line option.</p> <p>Default: 255</p>"},{"location":"configurations/uv/#show-inverted-tree-first","title":"Show inverted tree first","text":"<p>Whether the tree that displays the current package's dependants should be shown first.</p> <p>Default: <code>false</code></p>"},{"location":"ruff/","title":"Ruff integration","text":"<p>Ruff is a linter and formatter. While these features are mainly used via the command line, they are also provided via the language server protocol when Ruff is run as a language server.</p> <p>RyeCharm makes use of both aforementioned ways and allow choosing one over the other via running modes.</p>"},{"location":"ruff/#supported-files","title":"Supported files","text":"<p>Ruff itself supports <code>.py</code>, <code>.pyi</code> and <code>.ipynb</code> files. This plugin has yet to support the lattermost.</p>"},{"location":"ruff/actions/","title":"Actions","text":""},{"location":"ruff/actions/#clean-cache","title":"Clean cache","text":"<p>Remove all <code>.ruff_cache</code> directories in the project recursively.</p> <p>This is equivalent to running <code>ruff clean</code> at the project's path.</p>"},{"location":"ruff/actions/#clear-plugin-cache","title":"Clear plugin cache","text":"<p>Documentation popups are prerendered and cached. While the cache is automatically invalidated whenever the executable changes, manually clearing it might sometimes be useful.</p>"},{"location":"ruff/actions/#fix-all","title":"Fix all","text":"<p>This action has the same functionalities as that of the similarly-named intention.</p>"},{"location":"ruff/actions/#fix-all-unsafe-included","title":"Fix all, unsafe included","text":"<p>This action has the same functionalities as that of the similarly-named intention.</p>"},{"location":"ruff/actions/#open-configuration-file","title":"Open configuration file","text":"<p>Open the global Ruff configuration file (<code>ruff.toml</code>/<code>.ruff.toml</code>) in the editor.</p>"},{"location":"ruff/actions/#show-executable","title":"Show executable","text":"<p>Show the Ruff executable that would be used for the project, or, when the action is not triggered in a project context, the global Ruff executable.</p> <p></p>"},{"location":"ruff/actions/#show-linters","title":"Show linters","text":"<p>Show a table of upstream linters that Ruff supports.</p> <p>This is equivalent to running <code>ruff linter</code>.</p> <p></p>"},{"location":"ruff/actions/#show-version","title":"Show version","text":"<p>Display a message showing the version of the current Ruff executable.</p> <p>This is equivalent to running <code>ruff version</code>.</p> <p></p>"},{"location":"ruff/actions/#suggest-project-executable","title":"Suggest project executable","text":"<p>Find a potential executable and suggest setting it as the Ruff executable for the current project, even if one is already specified.</p> <p>In most cases, this is not necessary, since the plugin will detect such executables automatically.</p> <p></p>"},{"location":"ruff/documentation/","title":"Documentation","text":"<p>On hover or Quick Documentation (Ctrl+Q), RyeCharm will show documentation popups for the currently selected symbol if it is a recognized one.</p>"},{"location":"ruff/documentation/#rule-selectors","title":"Rule selectors","text":"<p>Rule documentation popups are shown for rule codes in <code># noqa</code> comments of both line and file-level as well as the following TOML settings:</p> <ul> <li>(<code>lint</code>) <code>extend-fixable</code></li> <li>(<code>lint</code>) <code>extend-ignore</code></li> <li>(<code>lint</code>) <code>extend-per-file-ignores.*</code></li> <li>(<code>lint</code>) <code>extend-safe-fixes</code></li> <li>(<code>lint</code>) <code>extend-select</code></li> <li>(<code>lint</code>) <code>extend-unfixable</code></li> <li>(<code>lint</code>) <code>extend-unsafe-fixes</code></li> <li>(<code>lint</code>) <code>fixable</code></li> <li>(<code>lint</code>) <code>ignore</code></li> <li>(<code>lint</code>) <code>per-file-ignores.*</code></li> <li>(<code>lint</code>) <code>select</code></li> <li>(<code>lint</code>) <code>unfixable</code></li> </ul> <p>This is equivalent to running <code>ruff rule ...</code> with the rule code as argument.</p> Line-level commentFile-level commentRule selector arrayRule selector array \u2013 prefix <p></p> <p></p> <p></p> <p></p>"},{"location":"ruff/documentation/#toml-setting-keys","title":"TOML setting keys","text":"<p>Configuration option documentation popups are shown for keys of the <code>[tool.ruff]</code> table of <code>pyproject.toml</code> (or a subtable thereof) and keys in <code>ruff.toml</code>/<code>.ruff.toml</code>.</p> <p>This is equivalent to running <code>ruff config ...</code> with the key's name as argument.</p> <code>pyproject.toml</code><code>ruff.toml</code> <p></p> <p></p>"},{"location":"ruff/documentation/#link-resolving","title":"Link resolving","text":"<p>Links to Ruff options and rules are resolved in-place.</p> <p>In other words, clicking on such a link will replace the current popup content with that option or rule's documentation.</p>"},{"location":"ruff/folding/","title":"Folding","text":"<p>Code folding, also known as code collapsing, replaces a piece of source code with arbitrary content.</p> <p>This is commonly used to display a contracted version of function bodies and similar blocks, but it can be used for other purposes as well.</p>"},{"location":"ruff/folding/#single-rule-selectors","title":"Single-rule selectors","text":"<p>A single-rule selector is one that corresponds to exactly one rule.</p> <p>Since Ruff selectors can only be either rule codes or code prefixes, \"folding\" selectors into the names of the rules they represent can help with readability.</p> <code>pyproject.toml</code><code>ruff.toml</code><code># noqa</code> comments <p></p> <p></p> <p></p>"},{"location":"ruff/folding/#known-problems","title":"Known problems","text":""},{"location":"ruff/folding/#data-dependency","title":"Data dependency","text":"<p>The folding builder works by relying on data retrieved from <code>ruff rule --all</code>. Most of the time, this information is read from the plugin's cache.</p> <p>When a project is opened for the first time, the necessary information might not be available yet, in which case the folding builder will ask a new thread to collect this data for its next run. This means no selectors will be made foldable in that run.</p> <p>The process will likely complete in less than one second, after which applicable selectors can be folded manually.</p> <p>Tip</p> <p>As a workaround, all such selectors can be folded collectively by triggering Collapse All (Ctrl+Shift+-) followed by Expand All (Ctrl+Shift++).</p>"},{"location":"ruff/folding/#reload-latency","title":"Reload latency","text":"<p>Due to how the IDE works, selectors may not be foldable right after a change that does not directly modify the TOML strings.</p> <p>Tip</p> <p>To enforce reloading, change the selector string in some way (e.g., add a space to the end of it), then revert that change.</p>"},{"location":"ruff/folding/#quick-documentation","title":"Quick documentation","text":"<p>When hovered over, a folded region will always display the expanded content. Thus, rule documentation will not be shown if the selector is folded.</p> <p>Tip</p> <p>To trigger rule documentation popups on a folded selector, either move the cursor to the quotes, which do not belong to the folded region, or use the Quick Documentation action (Ctrl+Q).</p>"},{"location":"ruff/formatting/","title":"Formatting","text":"<p>RyeCharm can trigger Ruff to format a file on three events:</p> <ul> <li>Reformat (Ctrl+Alt+L)</li> <li>Optimize imports (Ctrl+Alt+O)</li> <li>File save (Ctrl+S, editor tab close, IDE close, etc.)</li> </ul> <p>Unsupported files are not affected.</p>"},{"location":"ruff/formatting/#reformat","title":"Reformat","text":"<p>This event happens when the Reformat Code action (Ctrl+Alt+L) is triggered, possibly with some code selected.</p> <p>In Command line mode, this is equivalent to running <code>ruff format --range ...</code> with the file and the selected range as input.</p>"},{"location":"ruff/formatting/#optimize-imports","title":"Optimize imports","text":"<p>This event happens when the Optimize Imports action (Ctrl+Alt+O) is triggered.</p> <p>This is equivalent to running <code>ruff check --fix --select I,F401</code> with the file as input.</p>"},{"location":"ruff/formatting/#file-save","title":"File save","text":"<p>This event happens when a file is saved, automatically or manually.</p> <p>This is equivalent to running <code>ruff format</code> with the file as input.</p>"},{"location":"ruff/intentions/","title":"Intentions","text":""},{"location":"ruff/intentions/#fix-all","title":"Fix all","text":"<p>This intention is always available, given that the running mode is set to Command line.</p> <p>This is equivalent to running <code>ruff check --fix</code> with the file as input.</p>"},{"location":"ruff/intentions/#fix-all-unsafe-included","title":"Fix all, unsafe included","text":"<p>This intention is always available.</p> <p>This is equivalent to running <code>ruff check --fix --unsafe-fixes</code> with the file as input.</p>"},{"location":"ruff/intentions/#organize-imports","title":"Organize imports","text":"<p>This intention is always available, given that the running mode is set to Command line.</p> <p>It sorts the imports of the file, but does not remove those unused, unlike Optimize imports.</p> <p>This is equivalent to running <code>ruff check --fix select I</code> with the file as input.</p>"},{"location":"ruff/intentions/#reenable-rule","title":"Reenable rule","text":"<p>This intention is available when the cursor is placed in the range of a <code># noqa</code> rule code.</p> <p>It removes that rule code in-place. If that code is the only code, the entire comment will be removed.</p> BeforeAfter <p></p> <p></p>"},{"location":"ruff/intentions/#fix-all-similar-violations","title":"Fix all similar violations","text":"<p>This code action is only available as quick fix for violations. Its availability does not depend on the rule's fixability.</p> <p>It fixes the violation and all other violations of the same rule. There are two variants: safe and unsafe.</p> <p>This is equivalent to running <code>ruff check --fix select ...</code> with the rule code as input (optionally with <code>--unsafe-fixes</code>).</p>"},{"location":"ruff/linting/","title":"Linting","text":""},{"location":"ruff/linting/#in-editor","title":"In-editor","text":"<p>There are two types of linting diagnostics: Lint errors (each of which corresponds to a rule) and syntax errors. The latter is not reported by default, as it is expected that the same errors are already reported by the IDE.</p>"},{"location":"ruff/linting/#command-line-mode","title":"Command line mode","text":"<p>In Command line mode, the executable is invoked after every keystroke.</p> <p>This is equivalent to running <code>ruff check --no-fix</code> with the file as input.</p>"},{"location":"ruff/linting/#lsp-modes","title":"LSP modes","text":"<p>In LSP modes, diagnostics are sent to the client via <code>textDocument/publishDiagnostics</code> notifications.</p>"},{"location":"ruff/linting/#batch-inspection","title":"Batch inspection","text":"<p>RyeCharm also supports running Ruff using Inspect Code..., also known as batch inspection mode.</p> <p>This is equivalent to running <code>ruff check</code> at the project directory.</p> <p></p> <p>Warning</p> <p>If there are unsaved changes, the returned diagnostics may be out-of-date.</p>"},{"location":"ruff/running-modes/","title":"Running modes","text":"<p>There are three running modes: Command line, LSP4IJ and Native LSP client.</p> <p>These modes all have their own pros and cons. While RyeCharm will try to maintain consistency where possible, a few features/settings are only available in one mode but not another.</p> <p>The default mode is Command line. However, it is recommended to use either of the other two modes for performance and technical reasons:</p> <ul> <li>Prefer the Native LSP client mode if available,   especially if other language server plugins, bundled or third-party,   are present. This will help avoiding class loading errors (see below).</li> <li>Otherwise, prefer the LSP4IJ mode.</li> </ul> <p>See Linting and Formatting for more information.</p>"},{"location":"ruff/running-modes/#command-line-mode","title":"Command line mode","text":"<p>In Command line mode, RyeCharm will invoke the provided executable to retrieve necessary information for linting, formatting and <code># noqa</code> documentation popups.</p> <p>This is in contrary to the language server modes, in which there is only one long-running process that handles these operations via the language server protocol (LSP).</p> <p>For features not directly available via LSP, the executable will still be invoked. This is done to provide a consistent experience across all modes.</p>"},{"location":"ruff/running-modes/#native-lsp-client-and-lsp4ij-modes","title":"Native LSP client and LSP4IJ modes","text":"<p>These two modes make use of Ruff's language server capabilities, available via the <code>server</code> subcommand.</p> <p>The differences between them are that of the client libraries. To use the native client, you must be using a paid IDE or the unified PyCharm. On the other hand, LSP4IJ can be installed on any IDE.</p> Mode Native LSP client LSP4IJ Client Built-in LSP4IJ (third-party) Can be used on Paid IDEs, unified PyCharm All IDEs Supported features* Few Much wider range UI integration Better Good API stability Stable Unstable <p>* Ruff's features are supported equally well by both.</p> <p>Warning</p> <p>On an IDE with both clients available, a <code>LinkageError</code> will be thrown if Native LSP client is selected. This is a known limitation.</p>"},{"location":"rye/","title":"Rye integration","text":"<p>Rye was meant to be an all-in-one toolchain and package manager. Most of its features are now supported by uv, and it itself is going to be deprecated sometime in the future.</p> <p>Thus, only the following subcommands are supported:</p> <ul> <li><code>show</code>: Show the current project's information</li> <li><code>version</code>: Change the project's version</li> <li><code>config --show-path</code>: Show the path to Rye's configuration file</li> </ul> <p>Replacements:</p> <ul> <li>Formatting and linting: Use Ruff directly.</li> <li>Testing: Use Pytest directly.</li> <li>Project and package management: Use uv directly.</li> </ul>"},{"location":"rye/actions/","title":"Actions","text":""},{"location":"rye/actions/#open-configuration-file","title":"Open configuration file","text":"<p>Open the global Rye configuration file in the editor.</p> <p>This corresponds to <code>rye config --show-path</code>.</p> <p></p>"},{"location":"rye/actions/#show-executable","title":"Show executable","text":"<p>Show the Rye executable that would be used for the project, or, when the action is not triggered in a project context, the global Rye executable.</p> <p></p>"},{"location":"rye/actions/#show-project-information","title":"Show project information","text":"<p>Open a new editor tab prefilled with the project's information.</p> <p>This is equivalent to running <code>rye show</code> at the project's path.</p> <p></p>"},{"location":"rye/intentions/","title":"Intentions","text":""},{"location":"rye/intentions/#bump-project-version","title":"Bump project version","text":"<p>The three intentions of this type (for major, minor and patch bumping types) are available in a <code>pyproject.toml</code> file.</p> <p>This is equivalent to running <code>rye version --bump ...</code> at the project's path.</p> MajorMinorPatch <p></p> <p></p> <p></p>"},{"location":"uv/","title":"uv integration","text":"<p>uv is a Python package and project manager.</p>"},{"location":"uv/actions/","title":"Actions","text":""},{"location":"uv/actions/#show-executable","title":"Show executable","text":"<p>Show the uv executable that would be used for the project, or, when the action is not triggered in a project context, the global uv executable.</p> <p></p>"},{"location":"uv/actions/#show-version","title":"Show version","text":"<p>Display a message showing the version of the current uv executable.</p> <p>This is equivalent to running <code>uv self version</code>.</p> <p></p>"},{"location":"uv/documentation/","title":"Documentation","text":"<p>On hover or Quick Documentation (Ctrl+Q), RyeCharm will show documentation popups for the currently selected symbol if it is a recognized one.</p>"},{"location":"uv/documentation/#dependency-trees","title":"Dependency trees","text":"<p>When the following keys in <code>pyproject.toml</code>/<code>uv.toml</code> are hovered, RyeCharm will show dependency trees for the package in question:</p> <ul> <li><code>project.dependencies</code></li> <li><code>project.optional-dependencies.*</code></li> <li><code>build-system.requires</code></li> <li><code>dependency-groups.*</code></li> <li>[<code>tool</code>] <code>uv.constraint-dependencies</code></li> <li>[<code>tool</code>] <code>uv.dev-dependencies</code></li> <li>[<code>tool</code>] <code>uv.override-dependencies</code></li> <li>[<code>tool</code>] <code>uv.upgrade-package</code></li> <li>[<code>tool</code>] <code>uv.pip.upgrade-package</code></li> </ul> <p>Two trees will be shown: One for the package's dependencies and one for its dependants.</p> <p>This is equivalent to running <code>uv pip tree --package ... [--inverted]</code> with the package as argument.</p> DependenciesDependants <p></p> <p></p>"},{"location":"uv/inspections/","title":"Inspections","text":""},{"location":"uv/inspections/#editing-uvlock","title":"Editing <code>uv.lock</code>","text":"<p>When <code>uv.lock</code> is edited, an editor-level notice is shown.</p> <p><code>uv.lock</code> is meant to be generated by <code>uv</code>; manualy changes will be overwritten in subsequent runs. The file therefore should not be edited manually.</p> <p></p>"},{"location":"uv/inspections/#usages-of-tooluvdev-dependencies","title":"Usages of <code>tool.uv.dev-dependencies</code>","text":"<p>As of uv 0.4.27, which added support for PEP 735, this field is obsoleted in favor of the <code>dev</code> dependency group. It will eventually be deprecated and removed.</p> <p>More information can be found in uv's documentation.</p>"},{"location":"uv/intentions/","title":"Intentions","text":""},{"location":"uv/intentions/#synchronize-project","title":"Synchronize project","text":"<p>This intention is available in a <code>pyproject.toml</code> file. It does not modify the file, but trigger a subprocess that updates the project's environment.</p> <p>This is equivalent to running <code>uv sync</code> at the project's path.</p> <p></p>"},{"location":"uv/run-configurations/","title":"Run configurations","text":"<p>A run configuration defines something that can be executed.</p> <p>RyeCharm provides a uv run configuration type, which is available in the feature's standard dialog.</p> <p></p> <p>This type has multiple subpanels, also known as \"factories\", by which uv run configurations can be defined.</p>"},{"location":"uv/run-configurations/#custom-task","title":"Custom task","text":"<p>Run an uv command with the given arguments and environment at the specified working directory.</p>"},{"location":"uv/run-configurations/#project-script","title":"Project script","text":"<p>Run a project script using <code>uv run</code>.</p> <p>Run configurations of this kind can be automatically configured using run line markers shown in <code>pyproject.toml</code> or the corresponding actions in the menu when a subkey of either <code>[project.scripts]</code> or <code>[project.gui-scripts]</code> is right-clicked.</p> <p></p>"},{"location":"uv/run-configurations/#global-tool","title":"Global tool","text":"<p>Run a global tool using <code>uvx</code>/<code>uv tool run</code>.</p>"},{"location":"uv/run-configurations/#standalone-scripts","title":"Standalone scripts","text":"<p>Run a PEP 723 script using <code>uv run --script</code>.</p> <p>Run configurations of this kind can be automatically configured using run line markers shown next to script metadata blocks or the corresponding actions in the menu when such blocks are right-clicked.</p> <p></p>"}]}