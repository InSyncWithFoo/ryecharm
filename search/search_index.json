{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RyeCharm user documentation","text":"<p>RyeCharm is the all-in-one PyCharm plugin for Astral-backed Python tools: Ruff, uv and Rye.</p> <p>This plugin only supports the latest versions of the tools and can only be installed on PyCharm 2024.3 and later.</p>"},{"location":"#usage","title":"Usage","text":"<p>If you already have Rye, Ruff and/or uv installed, you can start using this plugin the moment you install it. The executables will be automatically detected.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This project is not an official Astral project.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#what-does-ryecharm-mean-what-is-the-goal-of-this-plugin","title":"What does \"RyeCharm\" mean? What is the goal of this plugin?","text":"<p>The name is a portmanteau of \"Rye\" and \"PyCharm\". Regardless of the name, this plugin only ever has minimal support for Rye, since, as of the former's creation, the latter is a tool being deprecated.</p> <p>It was created to become the only PyCharm plugin Python programmers will ever need when working with the next-generation tools maintained by Astral, much like how Rye was created to be an one-stop-shop.</p> <p>Astral's tools are fast and robust, while PyCharm's features are used (and perhaps loved) by many users. RyeCharm aims to combine the best of both worlds.</p>"},{"location":"faq/#is-this-an-official-astral-project","title":"Is this an official Astral project?","text":"<p>No. However, it is meant to serve as the first step towards an \"official\" plugin.</p>"},{"location":"features/","title":"Features","text":"<p>Aside from the specialized APIs used for \"core\" operations, RyeCharm provides integration via the following IDE features: actions, intentions and inspections.</p>"},{"location":"features/#actions","title":"Actions","text":"<p>IDE actions are the main entrypoint for many operations that are otherwise unfit to be used as intentions.</p> <p>Examples: Open configuration file and Cleaning cache.</p>"},{"location":"features/#intentions","title":"Intentions","text":"<p>Intentions are contextually relevant actions that may only be triggered in an editor.</p> <p>Examples: Bump project version and Synchronize project.</p>"},{"location":"features/#inspections","title":"Inspections","text":"<p>Inspections find certain problems with your project. Those implemented by RyeCharm are mostly about the use of the tools rather than code smells.</p> <p>Examples: <code>uv.lock</code> should not be edited manually.</p>"},{"location":"other-features/","title":"Other features","text":""},{"location":"other-features/#file-icons","title":"File icons","text":"<p>In the Project tool window, editor tabs, navigation bar and various other places, the icons for the following files are replaced with the tools' logos:</p> <ul> <li>Ruff: <code>ruff.toml</code>/<code>.ruff.toml</code></li> <li>uv: <code>uv.toml</code>, <code>uv.lock</code></li> <li>Rye: <code>.rye/config.toml</code></li> </ul> Project tool window: <p></p> Editor tabs: <p></p> Navigation bar: <p></p>"},{"location":"other-features/#new-terminal-autocompletion","title":"New terminal autocompletion","text":"<p>If the new terminal is used, autocompletion will be provided for <code>ruff</code>, <code>uv</code> and <code>uvx</code> commands.</p> <p></p>"},{"location":"other-features/#language-injection","title":"Language injection","text":""},{"location":"other-features/#inline-script-metadata-block","title":"Inline script metadata block","text":"<p>PEP 723 inline script metadata blocks are automatically injected with TOML. Only Python files whose extensions are either <code>.py</code> or unknown are supported.</p> <p>This can be disabled using the corresponding setting. To force rerendering, make an arbitrary edit or reopen the file.</p> <p></p>"},{"location":"other-features/#requirements-arrays-in-toml-files","title":"Requirements arrays in TOML files","text":"<p>uv settings that takes an array of PEP 508 dependencies are injected with Requirements, similar to that of <code>project.dependencies</code>. Such settings include:</p> <ul> <li>[<code>tool.uv</code>] <code>constraint-dependencies</code></li> <li>[<code>tool.uv</code>] <code>dev-dependencies</code></li> <li>[<code>tool.uv</code>] <code>override-dependencies</code></li> <li>[<code>tool.uv</code>] <code>upgrade-package</code></li> <li>[<code>tool.uv</code>] <code>pip.upgrade-package</code></li> </ul> <p><code>project.optional-dependencies</code> is also supported. This monkeypatches PY-71120.</p> pyproject.tomluv.toml <p></p> <p></p>"},{"location":"other-features/#edit-script-metadata-fragment","title":"Edit script metadata fragment","text":"<p>This intention is available when the cursor is inside the script metadata block.</p> <p>It opens a new editor with the fragment content prefilled, removing all prefixes and suffixes. The new content will be written back when this editor is closed.</p> Python fileNew editor <p></p> <p></p>"},{"location":"configurations/","title":"Configurations overview","text":"<p>RyeCharm allows configurations at two levels: IDE and project. Project-level configurations only override the IDE-level counterparts when the corresponding \"Override\" checkboxes are selected.</p> <p>Project-level settings are stored in the <code>ryecharm.xml</code> file under the <code>.idea</code> directory and can be shared with other people (for example, via version-control systems) to serve as the default settings for the project.</p> <p>Override settings are stored in the <code>ryecharm-overrides.xml</code> file in the same directory. This file should not be committed, as its purpose is to allow overriding project defaults.</p>"},{"location":"configurations/main/","title":"Other configurations","text":""},{"location":"configurations/main/#language-injection","title":"Language injection","text":""},{"location":"configurations/main/#pep-723-inline-script-metadata-blocks","title":"PEP 723 inline script metadata blocks","text":"<p>Whether PEP 723 inline script metadata blocks should have TOML injected.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/main/#requirements-arrays-in-toml-files","title":"Requirements arrays in TOML files","text":"<p>Whether settings taking requirements arrays as values should have Requirements injected.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/","title":"Ruff","text":""},{"location":"configurations/ruff/#executable","title":"Executable","text":"<p>The Ruff executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in the following order:</p> <ul> <li>The <code>ruff</code> executable found under Rye's <code>self</code> environment.</li> <li>Any <code>ruff</code> executable found in PATH.</li> <li>Any <code>ruff</code> executable found in the project's virtual environment.</li> </ul>"},{"location":"configurations/ruff/#cross-platform-executable-resolution","title":"Cross-platform executable resolution","text":"<p>If this option is enabled and the executable is specified as a relative path, it will be resolved against the project's interpreter directory with its extension removed.</p> <p>This is useful if Ruff is a development dependency and is expected to always be installed, regardless of the user's platform.</p>"},{"location":"configurations/ruff/#configuration-file","title":"Configuration file","text":"<p>If specified, this file will be passed to Ruff on every invocation.</p> <p>This corresponds to the <code>--config</code> command-line option and the <code>configuration</code> language server setting.</p>"},{"location":"configurations/ruff/#running-mode","title":"Running mode","text":"<p>The manner in which the executable is invoked.</p> <p>Default: Command line</p> <p>See Running modes for more information.</p>"},{"location":"configurations/ruff/#main-functionalities","title":"Main functionalities","text":""},{"location":"configurations/ruff/#linting","title":"Linting","text":"<p>Whether linting errors (diagnostics) should be shown.</p> <p>This corresponds to the <code>lint.enable</code> language server setting.</p> <p>Default: <code>true</code></p> <p>See Linting for more information.</p>"},{"location":"configurations/ruff/#report-syntax-errors","title":"Report syntax errors","text":"<p>Whether diagnostics for syntax errors should be shown.</p> <p>This corresponds to the <code>showSyntaxErrors</code> language server setting.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#tooltip-format","title":"Tooltip format","text":"<p>The format in which tooltips are displayed.</p> <p>Default: A123: Message</p> MessageA123: MessageRuff (A123): MessageMessage Ruff(A123) <p></p> <p></p> <p></p> <p></p>"},{"location":"configurations/ruff/#quick-fixes","title":"Quick fixes","text":"<p>Whether quick fixes (code actions) should be suggested.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#fix-all-fixable-violations","title":"Fix all fixable violations","text":"<p>Whether a quick fix to fix all safely fixable violations should be suggested.</p> <p>This corresponds to the <code>fixAll</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#organize-imports","title":"Organize imports","text":"<p>Whether a quick fix to organize the imports section should be suggested.</p> <p>This corresponds to the <code>organizeImports</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#disable-rule-for-line","title":"Disable rule for line","text":"<p>Whether a quick fix to disable a given rule for the current line should be suggested.</p> <p>This corresponds to the <code>codeAction.disableRuleComment.enable</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#fix-single-violation","title":"Fix single violation","text":"<p>Whether a quick fix specific to the current violation should be suggested.</p> <p>This corresponds to the <code>codeAction.fixViolation.enable</code> language server setting.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#formatting","title":"Formatting","text":"<p>Whether Ruff's formatter should be used instead of the IDE's default formatter.</p> <p>Default: <code>true</code></p> <p>See Formatting for more information.</p>"},{"location":"configurations/ruff/#run-on-reformat","title":"Run on reformat","text":"<p>Whether the Reformat Code action should trigger Ruff.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#run-on-optimize-imports","title":"Run on optimize imports","text":"<p>Whether the Optimize Imports action should trigger Ruff.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#documentation-popups","title":"Documentation popups","text":"<p>Whether documentation popups should be shown.</p> <p>Default: <code>true</code></p> <p>See Documentation for more information.</p>"},{"location":"configurations/ruff/#for-rule-codes-in-noqa-comments","title":"For rule codes in <code>noqa</code> comments","text":"<p>Whether documentation popups should be shown when <code>noqa</code> codes in Python comments are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#for-rule-codes-in-toml-files","title":"For rule codes in TOML files","text":"<p>Whether documentation popups should be shown when rule codes in rule selector arrays are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#for-setting-keys-in-toml-files","title":"For setting keys in TOML files","text":"<p>Whether documentation popups should be shown when the keys of the <code>tool.ruff</code> table in the <code>pyproject.toml</code> file (or top-level keys for <code>ruff.toml</code>/<code>.ruff.toml</code>) are hovered.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#log-level","title":"Log level","text":"<p>The amount of logs the language server will emit.</p> <p>This corresponds to the <code>logLevel</code> language server setting.</p> <p>Default: Information</p>"},{"location":"configurations/ruff/#log-file","title":"Log file","text":"<p>The file to which the logs will be written.</p> <p>This corresponds to the <code>logFile</code> language server setting.</p>"},{"location":"configurations/ruff/#run-on-save","title":"Run on save","text":"<p>Whether Ruff should be run on files before saving.</p> <p>If both \"fix problems\" and \"format\" are enabled, they are run in that order.</p>"},{"location":"configurations/ruff/#project-files-only","title":"Project files only","text":"<p>Whether only files belong to the current project should be run on.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#format","title":"Format","text":"<p>Whether Ruff should format the file before it is saved.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#fix-violations","title":"Fix violations","text":"<p>Whether Ruff should try to fix all safely fixable violations in the file before it is saved.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/ruff/#other-settings","title":"Other settings","text":""},{"location":"configurations/ruff/#suggest-executable","title":"Suggest executable","text":"<p>Whether RyeCharm should automatically find a potential Ruff executable and suggest setting that as the executable for the current project on some events.</p> <p>This feature can also be triggered as an action.</p>"},{"location":"configurations/ruff/#on-project-open","title":"On project open","text":"<p>Whether a potential executable should be suggested when a project is opened.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#on-packages-change","title":"On packages change","text":"<p>Whether a potential executable should be suggested when a package is installed via the Python Packages toolwindow.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/ruff/#advanced-settings","title":"Advanced settings","text":""},{"location":"configurations/ruff/#automatically-restart-servers-on-configuration-change","title":"Automatically restart servers on configuration change","text":"<p>Whether the running servers should be restarted immediately when the Apply/OK buttons are clicked.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/rye/","title":"Rye","text":""},{"location":"configurations/rye/#executable","title":"Executable","text":"<p>The Rye executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in PATH.</p>"},{"location":"configurations/uv/","title":"uv","text":""},{"location":"configurations/uv/#executable","title":"Executable","text":"<p>The uv executable to be used for all operations.</p> <p>If it is not provided, RyeCharm will attempt to find one in the following order:</p> <ul> <li>The <code>uv</code> executable found under Rye's <code>uv</code> subdirectory.</li> <li>Any <code>uv</code> executable found in PATH.</li> <li>Any <code>uv</code> executable found in the project's virtual environment.</li> </ul>"},{"location":"configurations/uv/#use-uv-for-package-operations","title":"Use uv for package operations","text":"<p>If enabled, the Python Packages toolwindow's package operations will be performed with <code>uv</code> instead of the default <code>pip</code>.</p> <p>This setting only affects projects generated using the uv panel.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/uv/#enforce-for-non-uv-project","title":"Enforce for non-uv project","text":"<p>If enabled, uv will be used for the current project, even if it is not a uv-generated project.</p> <p>Default: <code>false</code></p>"},{"location":"ruff/","title":"Ruff integration","text":"<p>Ruff is a linter and formatter. While these features are mainly used via the command line, they are also provided via the language server protocol when Ruff is run as a language server.</p> <p>RyeCharm makes use of both aforementioned ways and allow choosing one over the other via running modes.</p>"},{"location":"ruff/#supported-files","title":"Supported files","text":"<p>Ruff itself supports <code>.py</code>, <code>.pyi</code> and <code>.ipynb</code> files. This plugin has yet to support the lattermost.</p>"},{"location":"ruff/actions/","title":"Actions","text":""},{"location":"ruff/actions/#clean-cache","title":"Clean cache","text":"<p>Remove all <code>.ruff_cache</code> directories in the project recursively.</p> <p>This is equivalent to running <code>ruff clean</code> at the project's path.</p>"},{"location":"ruff/actions/#clear-plugin-cache","title":"Clear plugin cache","text":"<p>Documentation popups are prerendered and cached. While the cache is automatically invalidated whenever the executable changes, manually clearing it might sometimes be useful.</p>"},{"location":"ruff/actions/#show-executable","title":"Show executable","text":"<p>Show the Ruff executable that would be used for the project, or, when the action is not triggered in a project context, the global Ruff executable.</p> <p></p>"},{"location":"ruff/actions/#show-linters","title":"Show linters","text":"<p>Show a table of upstream linters that Ruff supports.</p> <p>This is equivalent to running <code>ruff linter</code>.</p> <p></p>"},{"location":"ruff/actions/#show-version","title":"Show version","text":"<p>Display a message showing the version of the current Ruff executable.</p> <p>This is equivalent to running <code>ruff version</code>.</p> <p></p>"},{"location":"ruff/actions/#suggest-project-executable","title":"Suggest project executable","text":"<p>Find a potential executable and suggest setting it as the Ruff executable for the current project, even if one is already specified.</p> <p>In most cases, this is not necessary, since the plugin will detect such executables automatically.</p> <p></p>"},{"location":"ruff/documentation/","title":"Documentation","text":"<p>On hover or Quick Documentation (Ctrl + Q), RyeCharm will show documentation popups for the currently selected symbol if it is a recognized one.</p>"},{"location":"ruff/documentation/#rule-selectors","title":"Rule selectors","text":"<p>Rule documentation popups are shown for rule codes in <code># noqa</code> comments of both line and file-level as well as the following TOML settings:</p> <ul> <li>(<code>lint</code>) <code>extend-fixable</code></li> <li>(<code>lint</code>) <code>extend-ignore</code></li> <li>(<code>lint</code>) <code>extend-per-file-ignores.*</code></li> <li>(<code>lint</code>) <code>extend-safe-fixes</code></li> <li>(<code>lint</code>) <code>extend-select</code></li> <li>(<code>lint</code>) <code>extend-unfixable</code></li> <li>(<code>lint</code>) <code>extend-unsafe-fixes</code></li> <li>(<code>lint</code>) <code>fixable</code></li> <li>(<code>lint</code>) <code>ignore</code></li> <li>(<code>lint</code>) <code>per-file-ignores.*</code></li> <li>(<code>lint</code>) <code>select</code></li> <li>(<code>lint</code>) <code>unfixable</code></li> </ul> <p>This is equivalent to running <code>ruff rule ...</code> with the rule code as argument.</p> Line-level commentFile-level commentRule selector array <p></p> <p></p> <p></p>"},{"location":"ruff/documentation/#toml-setting-keys","title":"TOML setting keys","text":"<p>Configuration option documentation popups are shown for keys of the <code>[tool.ruff]</code> table of <code>pyproject.toml</code> (or a subtable thereof) and keys in <code>ruff.toml</code>/<code>.ruff.toml</code>.</p> <p>This is equivalent to running <code>ruff config ...</code> with the key's name as argument.</p> <code>pyproject.toml</code><code>ruff.toml</code> <p></p> <p></p>"},{"location":"ruff/formatting/","title":"Formatting","text":"<p>RyeCharm can trigger Ruff to format a file on three events:</p> <ul> <li>Reformat (Ctrl + Alt + L)</li> <li>Optimize imports (Ctrl + Alt + O)</li> <li>File save (Ctrl + S, editor tab close, IDE close, etc.)</li> </ul> <p>Unsupported files are not affected.</p>"},{"location":"ruff/formatting/#reformat","title":"Reformat","text":"<p>This event happens when the Reformat Code action (Ctrl + Alt + L) is triggered, possibly with some code selected.</p> <p>In Command line mode, this is equivalent to running <code>ruff format --range ...</code> with the file and the selected range as input.</p>"},{"location":"ruff/formatting/#optimize-imports","title":"Optimize imports","text":"<p>This event happens when the Optimize Imports action (Ctrl + Alt + O) is triggered.</p> <p>This is equivalent to running <code>ruff check --fix --select I,F401</code> with the file as input.</p>"},{"location":"ruff/formatting/#file-save","title":"File save","text":"<p>This event happens when a file is saved, automatically or manually.</p> <p>This is equivalent to running <code>ruff format</code> with the file as input.</p>"},{"location":"ruff/intentions/","title":"Intentions","text":""},{"location":"ruff/intentions/#fix-all","title":"Fix all","text":"<p>This intention is always available, given that the running mode is set to Command line.</p> <p>This is equivalent to running <code>ruff check --fix</code> with the file as input.</p>"},{"location":"ruff/intentions/#organize-imports","title":"Organize imports","text":"<p>This intention is always available, given that the running mode is set to Command line.</p> <p>It sorts the imports of the file, but does not remove those unused, unlike Optimize imports.</p> <p>This is equivalent to running <code>ruff check --fix select I</code> with the file as input.</p>"},{"location":"ruff/linting/","title":"Linting","text":"<p>There are two types of linting diagnostics: Lint errors (each of which corresponds to a rule) and syntax errors. The latter is not reported by default, as it is expected that the same errors are already reported by the IDE.</p>"},{"location":"ruff/linting/#command-line-mode","title":"Command line mode","text":"<p>In Command line mode, the executable is invoked after every keystroke.</p> <p>This is equivalent to running <code>ruff check --no-fix</code> with the file as input.</p>"},{"location":"ruff/linting/#lsp-modes","title":"LSP modes","text":"<p>In LSP modes, diagnostics are sent to the client via <code>textDocument/publishDiagnostics</code> notifications.</p>"},{"location":"ruff/running-modes/","title":"Running modes","text":"<p>There are three running modes: Command line, LSP4IJ and Native LSP client.</p> <p>These modes all have their own pros and cons. While RyeCharm will try to maintain consistency where possible, a few features/settings are only available in one mode but not another.</p> <p>The default mode is Command line, which allows for the widest range of customizations. However, it is recommended to use Native LSP client if possible, for performance and technical reasons.</p> <p>See Linting and Formatting for more information.</p>"},{"location":"ruff/running-modes/#command-line-mode","title":"Command line mode","text":"<p>In Command line mode, RyeCharm will invoke the provided executable whenever it needs to run a task. This is in contrary to the language server modes, in which there is only one long-running process that handles all operations via the language server protocol.</p>"},{"location":"ruff/running-modes/#native-lsp-client-and-lsp4ij-modes","title":"Native LSP client and LSP4IJ modes","text":"<p>These two modes make use of Ruff's language server capabilities, available via the <code>server</code> subcommand.</p> <p>The differences between them are that of the client libraries. To use the native client, you must be using a paid IDE. On the other hand, LSP4IJ can be installed on any IDE.</p> Mode Native LSP client LSP4IJ Client Built-in LSP4IJ (third-party) Can be used on Paid IDEs All IDEs Supported features* Few Much wider range UI integrations Better Good Customizations Easy to implement Limited API stability Unstable Unstable <p>* Ruff's features are supported equally well by both.</p> <p>Warning</p> <p>On a (paid) IDE with both clients available, a <code>LinkageError</code> will be thrown if Native LSP client is selected. This is a known limitation.</p>"},{"location":"rye/","title":"Rye integration","text":"<p>Rye was meant to be an all-in-one toolchain and package manager. Most of its features are now supported by uv, and it itself is going to be deprecated sometime in the future.</p> <p>Thus, only the following subcommands are supported:</p> <ul> <li><code>show</code>: Show the current project's information</li> <li><code>version</code>: Change the project's version</li> <li><code>config --show-path</code>: Show the path to Rye's configuration file</li> </ul> <p>Replacements:</p> <ul> <li>Formatting and linting: Use Ruff directly.</li> <li>Testing: Use Pytest directly.</li> <li>Project and package management: Use uv directly.</li> </ul>"},{"location":"rye/actions/","title":"Actions","text":""},{"location":"rye/actions/#open-configuration-file","title":"Open configuration file","text":"<p>Open the global Rye configuration file in the editor.</p> <p>This corresponds to <code>rye config --show-path</code>.</p> <p></p>"},{"location":"rye/actions/#show-executable","title":"Show executable","text":"<p>Show the Rye executable that would be used for the project, or, when the action is not triggered in a project context, the global Rye executable.</p> <p></p>"},{"location":"rye/actions/#show-project-information","title":"Show project information","text":"<p>Open a new editor tab prefilled with the project's information.</p> <p>This is equivalent to running <code>rye show</code> at the project's path.</p> <p></p>"},{"location":"rye/intentions/","title":"Intentions","text":""},{"location":"rye/intentions/#bump-project-version","title":"Bump project version","text":"<p>The three intentions of this type (for major, minor and patch bumping types) are available in a <code>pyproject.toml</code> file.</p> <p>This is equivalent to running <code>rye version --bump ...</code> at the project's path.</p> MajorMinorPatch <p></p> <p></p> <p></p>"},{"location":"uv/","title":"uv integration","text":"<p>uv is a Python package and project manager.</p> <p>RyeCharm provides uv integrations via two main functionalities: generating new projects and managing packages.</p>"},{"location":"uv/actions/","title":"Actions","text":""},{"location":"uv/actions/#show-executable","title":"Show executable","text":"<p>Show the uv executable that would be used for the project, or, when the action is not triggered in a project context, the global uv executable.</p> <p></p>"},{"location":"uv/actions/#show-version","title":"Show version","text":"<p>Display a message showing the version of the current uv executable.</p> <p>This is equivalent to running <code>uv version</code>.</p> <p></p>"},{"location":"uv/generating/","title":"Generating new projects","text":"<p>In the New Project dialog, there will be an uv option on the left column.</p> <p>This panel has the same basic functionalities as the default (Pure Python) panel.</p> <p></p> <p>Note</p> <p>Due to technical limitations, it is currently not possible to extend the standard panel. The uv panel cannot be used with existing framework panels. This is expected to change in PyCharm 2024.3.</p>"},{"location":"uv/generating/#settings","title":"Settings","text":""},{"location":"uv/generating/#basic-fields","title":"Basic fields","text":"<p>The Name field specifies the new IntelliJ project name and the name of the directory in which it will be created.</p> <p>The Location specifies the directory which the new directory will be created as a child of.</p> <p>The Create Git repository specifies whether a Git repository should be created for this new project.</p> <p>These fields work the same as their counterparts in the standard panel.</p>"},{"location":"uv/generating/#base-interpreter","title":"Base interpreter","text":"<p>The interpreter to be passed to <code>uv init</code> and <code>uv venv</code>.</p> <p>This corresponds to the <code>--python</code> command-line option.</p>"},{"location":"uv/generating/#uv-executable","title":"uv executable","text":"<p>The uv executable to be used for the generation process. It will be saved as the global executable once the process is completed.</p>"},{"location":"uv/generating/#distribution-name","title":"Distribution name","text":"<p>The name to be used in the <code>project.name</code> field in <code>pyproject.toml</code>. This name must match the regular expression <code>(?i)^([A-Z0-9]|[A-Z0-9][A-Z0-9._-]*[A-Z0-9])$</code>.</p>"},{"location":"uv/generating/#project-kind","title":"Project kind","text":"<p>The kind of the project you want to create.</p> <ul> <li>App: Corresponds to <code>--app</code>.</li> <li>Library: Corresponds to <code>--lib</code>.</li> <li>Packaged app: Corresponds to <code>--app --package</code>.</li> </ul> <p>Default: App</p>"},{"location":"uv/generating/#create-readmemd","title":"Create <code>README.md</code>","text":"<p>Whether a <code>README.md</code> should be created for the new project.</p> <p>This corresponds to the <code>--no-readme</code> command-line option.</p> <p>Default: <code>true</code></p>"},{"location":"uv/generating/#pin-python","title":"Pin Python","text":"<p>Whether the minimum Python version should be pinned.</p> <p>This corresponds to the <code>--no-pin-python</code> command-line option.</p> <p>Default: <code>true</code></p>"},{"location":"uv/inspections/","title":"Inspections","text":""},{"location":"uv/inspections/#uvlock-should-not-be-edited-manually","title":"<code>uv.lock</code> should not be edited manually","text":"<p>When <code>uv.lock</code> is edited, an editor-level notice is shown.</p> <p><code>uv.lock</code> is meant to be generated by <code>uv</code>; manualy changes will be overwritten in subsequent runs. The file therefore should not be edited manually.</p> <p></p>"},{"location":"uv/intentions/","title":"Intentions","text":""},{"location":"uv/intentions/#synchronize-project","title":"Synchronize project","text":"<p>This intention is available in a <code>pyproject.toml</code> file. It does not modify the file, but trigger a subprocess that updates the project's environment.</p> <p>This is equivalent to running <code>uv sync</code> at the project's path.</p> <p></p>"},{"location":"uv/managing/","title":"Managing packages","text":"<p>When the Python Packages toolwindow is used, install, uninstall and upgrade operations will invoke <code>uv</code>'s corresponding commands instead of <code>pip</code>'s.</p> <p>This can be disabled using the corresponding setting.</p>"}]}